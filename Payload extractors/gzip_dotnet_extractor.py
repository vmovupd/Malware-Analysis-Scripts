"""
Payload extractor for second (can be also first) stage loader written in .NET. It stores a payload as a compressed array with some junk bytes at the start. The decompressed data is also reversed. Then, it invokes the payload using CreateDelegate() with the hardcoded, plaintext method and type.

The script has been tested on the following sample:
4750dfff318bcf5ba7bf432cc40a868140a07b6f3d1a8114bdd625a762799703
"""

import argparse, gzip, clr
from System import BitConverter

def main(args, opcodes):
    pe = dnlib.DotNet.ModuleDefMD.Load(args.file)
    invoked_method = []
    
    for Type in pe.GetTypes():
    
        # Extract the payload from PrivateImplementationDetails class and search for Ldstr opcode to extract the invoked method
        if "PrivateImplementationDetails" in Type.Name.ToString():
            for field in Type.Fields:
                compressed_data = BitConverter.ToString(field.InitialValue).replace("-", '')
                compressed_data = bytearray.fromhex(compressed_data[compressed_data.find("1F8B"):])
                decomp_data = gzip.decompress(compressed_data)[::-1]
                print("[+] Decompressed payload size (bytes): {}".format(len(decomp_data)))
                with open(args.output, 'wb') as f:
                    f.write(decomp_data)
                print("[+] Payload has been decompressed and written to {}".format(args.output))
        
        for method in Type.Methods:
            if len(invoked_method) != 0:
                continue
            
            for instr in method.Body.Instructions:
                if instr.OpCode == opcodes.Ldstr:
                    invoked_method.append(instr.Operand)
            
            if len(invoked_method) == 2:
                print("[+] Invoked method in the payload: {}.{}".format(invoked_method[0], invoked_method[1]))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Payload extractor for n-stage .NET loader with GZip compressed and reversed array", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-f', '--file', required=True, help='Full path to n-stage loader', default=argparse.SUPPRESS)
    parser.add_argument('--dnlib', required=True, help='Full path to the dnlib.dll', default=argparse.SUPPRESS)
    parser.add_argument('-o', '--output', help='Output filename', default='payload.bin')
    
    clr.AddReference(parser.parse_args().dnlib)
    
    import dnlib
    from dnlib.DotNet.Emit import OpCodes
    main(parser.parse_args(), OpCodes)
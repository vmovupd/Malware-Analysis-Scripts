import rzpipe, argparse, sys

def GetParamaters(pipe, encypted_str_addr):
    """Retrieves the alphabet and shift number to decrypt the strings using Caesar cipher; renames the string decryption function to CaesarStringDecrypt."""
    xref = 0
    for xrf in pipe.cmdj("axtj @ " + hex(encypted_str_addr)):
        if (pipe.cmdj("pdj 1 @ " + hex(xrf["from"]))[0]["type"] == "mov"):
            xref = xrf["from"]
            break
    
    if (xref == 0):
        raise Exception("Xref to decryption function was not found.")
    
    print("[+] Encrypted string found at {}".format(hex(encypted_str_addr)))
    
    # Get the alphabet
    func_end = pipe.cmdj("pdj 1 @ " + hex(xref))[0]["fcn_last"]
    instr = pipe.cmdj("pdj 1 @ " + hex(xref + pipe.cmdj("pdj 1 @ " + hex(xref))[0]["size"]))
    while (instr[0]["type"] != "call" and instr[0]["offset"] != func_end):
        instr = pipe.cmdj("pdj 1 @ " + hex(instr[0]["offset"] + instr[0]["size"]))
    dec_func_addr = instr[0]["jump"]
    alphabet = pipe.cmdj("pszj @ " + hex(pipe.cmdj("afnsj @ " + hex(dec_func_addr))["ref"]))["string"]
    
    # Rename the function to CaesarStringDecrypt
    pipe.cmd("afn CaesarStringDecrypt @ " + hex(dec_func_addr))
    print("[+] String decryption function found at {}".format(hex(dec_func_addr)))
    
    # Get the shift number
    func_end = pipe.cmdj("pdj 1 @ " + hex(dec_func_addr))[0]["fcn_last"]
    instr = pipe.cmdj("pdj 1 @ " + hex(dec_func_addr + pipe.cmdj("pdj 1 @ " + hex(dec_func_addr))[0]["size"]))
    while ((instr[0]["type"] != "add" or not 'ptr' in instr[0] or not 'val' in instr[0]) and instr[0]["offset"] != func_end):
        instr = pipe.cmdj("pdj 1 @ " + hex(instr[0]["offset"] + instr[0]["size"]))
    shift_number = instr[0]["val"]
    
    print("[+] Alphabet used for Caesar cipher: {}".format(alphabet))
    print("[+] Shift number used for Caesar cipher: {}".format(shift_number))
    
    return alphabet, shift_number, dec_func_addr

def CaesarDecrypt(enc_str, alphabet, shift_number):
    """Decrypts encrypted string using Caesar cipher with the specified parameters."""
    dec_string = ""
    for i in range(len(enc_str)):
        dec_string += alphabet[(alphabet.find(enc_str[i]) + shift_number) % len(alphabet)]
    return dec_string

def RenameFlag(pipe, old_name, new_name):
    try:
        pipe.cmd("fr " + old_name + " " + new_name)
    except:
        print("An error occured while renaming flag: {}".format(old_name))

def LocateDecFunc(pipe):
    """Locates the string decryption function; returns the parameters used in Caesar cipher."""
    for imp in pipe.cmdj("iij"):
        if (imp["name"] == "LoadLibraryA"):
            for xref in pipe.cmdj("axtj @ " + hex(imp["plt"])):
                if(xref["type"] == "CALL"):
                    instr = pipe.cmdj("pdj -1 @ " + hex(xref["from"]))
                    while ((instr[0]["type"] != "push" or not 'ptr' in instr[0] or not 'val' in instr[0]) and instr[0]["offset"] != (pipe.cmdj("afoj @ " + hex(xref["from"]))["address"])):
                        instr = pipe.cmdj("pdj -1 @ " + hex(instr[0]["offset"]))
                    try:
                        return GetParamaters(pipe, instr[0]["val"])
                    except Exception:
                        continue
    print("[*] An error has occured when locating an encrypted string in the binary.")
    sys.exit(1)

def RetrieveStr(pipe, xref):
    """Searches for the MOV instruction which contains a pointer to the encrypted string as the encrypted strings are transmitted through GPR.
    Examples: 0x00401416, 0x00401420, 0x00401445."""
    instr = pipe.cmdj("pdj -1 @ " + hex(xref))
    while ((instr[0]["type"] != "mov" or instr[0]["refptr"] == True or instr[0]["family"] != "cpu" or not 'ptr' in instr[0] or not 'val' in instr[0]) and instr[0]["offset"] != (pipe.cmdj("afoj @ " + hex(xref))["address"])):
        instr = pipe.cmdj("pdj -1 @ " + hex(instr[0]["offset"]))
    return pipe.cmdj("pszj @ " + hex(instr[0]["ptr"]))["string"], instr[0]["ptr"]

def main(args):
    with rzpipe.open(args.file) as rz:
        rz.cmd("aaa")
        (alphabet, shift_number, dec_func) = LocateDecFunc(rz)
        used_flags = [] # used to define which flags have been already used and how many times
        for xref in rz.cmdj("axtj @ " + hex(dec_func)):
            (enc_str, enc_str_addr) = RetrieveStr(rz, xref["from"])
            dec_str = CaesarDecrypt(enc_str, alphabet, shift_number)
            flag = rz.cmdj("fdj @ " + hex(enc_str_addr))["name"]
            if any([dec_str == flag_name for flag_name, _ in used_flags]):
                count = next(count for flag_name, count in used_flags if flag_name == dec_str)
                RenameFlag(rz, flag, (dec_str + "_" + str(count)))
                index = next(i for i, (flag_name, _) in enumerate(used_flags) if flag_name == dec_str)
                used_flags[index] = (dec_str, count + 1)
                print("[+] Another instance of {} is found at {}. Renamed to {}".format(dec_str, hex(enc_str_addr), (dec_str + "_" + str(count))))
            else:
                RenameFlag(rz, flag, dec_str)
                used_flags.append((dec_str, 0))
                print("[+] Decrypted string at {}: {}".format(hex(enc_str_addr), dec_str))
        rz.cmd("Ps " + args.output)
        print("[+] Rzdb file w/ decrypted strings is written to {}".format(args.output))
    
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="String decryptor for cruloader first stage", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-f', '--file', required=True, help='Full path to the first stage', default=argparse.SUPPRESS)
    parser.add_argument('-o', '--output', help='Output rzdb filename', default='first_stage.rzdb')
    
    main(parser.parse_args())